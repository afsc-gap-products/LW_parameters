get_params <- map(unique(spec_dat$species_code), get_lw, df = spec_dat) #for each unique species code, use get_lw function, with spec_dat data frame
for(i in 1:length(unique(spec_dat$species_code))) # re-arrange results returned as list into tibble (data frame)
{
print(i)
if(i == 1) {param_dat <- tibble()}
param_dat <- bind_rows(param_dat, get_params[[i]])
}
param_dat <- param_dat %>% arrange(species_code) #final values for each species
write_csv(param_dat, path = here("output", paste0("species_LW_param_ests_", year_condition, "_", today(),".csv")))
# group by species code, get l-w regr by species, pull alpha and beta (broom pkg)
get_lw <- function(df, group){ #get l-w relationship from the data frame (df) by species (group)
spec_test <- df %>% dplyr::filter(species_code == group) #filter by species code
#define columns
weight<-spec_test$weight #set up for nls(), get weight
length<-spec_test$length #set up for nls(), get length
#run nonlinear least squares regression and print summary report
nls_LW_fit<-nls(weight~alpha*length^beta,
data=list(length,weight),
start=list(alpha=.001,beta=5),
trace=F,
control=list(maxiter = 500))
lw_results <- broom::tidy(nls_LW_fit) #get tidy results
print(c("species", group)) #print output as fxn runs
print(lw_results) #print output as fxn runs
alpha_result <- lw_results$estimate[1]*1000 #extract alpha value from summary results
beta_result <- lw_results$estimate[2]  #extract beta value from summary results
final <- bind_cols(species_code = group, # return a tibble with spec code, alpha, beta
alpha = alpha_result,
beta = beta_result)
return(final) #return final tibble
}
# group by species code, get l-w regr by species, pull alpha and beta (broom pkg)
get_lw <- function(df, group){ #get l-w relationship from the data frame (df) by species (group)
spec_test <- df %>% dplyr::filter(species_code == group) #filter by species code
#define columns
weight<-spec_test$weight #set up for nls(), get weight
library(FSA)
library(FSAdata)
library(here)
library(tidyverse)
library(lubridate)
library(RODBC)
library(rstudioapi)
library(janitor)
library(readr)
library(broom)
year_condition<-"warm"
year_condition <- "cold"
present<-year(today())
if(year_condition=="warm") {year_select<-c(2003:2005,2014:2020,present)}
if(year_condition=="cold"){year_select<-c(2006:2013, present)}
year_select
# end <- Sys.time() #took ~5 minutes to run
#
# write_csv(oracle_data, path = here("data", paste0("oracle_data_", today(), ".csv"))) #~45 MB, takes a while
orc_data <- read_csv(file = here::here("data", "oracle_data_2021-02-22.csv"))
orc_data
spec_data <- orc_data %>%
clean_names()
head(spec_data)
prev_parameters_csv <- read_csv(file = here::here("data", "previous_parameters_2021-03-01.csv"))
prev_params <- prev_parameters_csv %>% janitor::clean_names()
#read in species codes
lw2020<-read.csv(here::here("data","final_2020_lw_parameters.csv"))
species_codes<-lw2020[,"species_code"]
species_names<-lw2020[,"common_name"]
name_code <- lw2020 %>%
dplyr::select(common_name, species_code)
spec_dat <- spec_data %>%
dplyr::filter(survey_definition_id %in% c(98,143)) %>%
dplyr::filter(species_code %in% species_codes) %>%
dplyr::filter(year %in% year_select) %>%
dplyr::select(species_code, length, weight) %>%
full_join(name_code)
get_lw <- function(df, group){ #get l-w relationship from the data frame (df) by species (group)
spec_test <- df %>% dplyr::filter(species_code == group) #filter by species code
#define columns
weight<-spec_test$weight #set up for nls(), get weight
length<-spec_test$length #set up for nls(), get length
# test section
l_w_index <- bind_cols(weight = weight, length = length) %>% #bind matches together
dplyr::filter(!is.na(weight)) %>% #remove na values
dplyr::filter(!is.na(length)) %>%
dplyr::filter(weight > 0) %>% #remove 0 values
dplyr::filter(length > 0)
new_weight <- l_w_index$weight
new_length <- l_w_index$length
#run nonlinear least squares regression and print summary report
nls_LW_fit<-nls(new_weight~alpha*new_length^beta,
data=list(new_length, new_weight),
start=list(alpha=.001,beta=5),
trace=F,
control=list(maxiter = 500))
lw_results <- broom::tidy(nls_LW_fit) #get tidy results
print(c("species", group)) #print output as fxn runs
print(lw_results) #print output as fxn runs
alpha_result <- lw_results$estimate[1]*1000 #extract alpha value from summary results
beta_result <- lw_results$estimate[2]  #extract beta value from summary results
final <- bind_cols(species_code = group, # return a tibble with spec code, alpha, beta
alpha = alpha_result,
beta = beta_result)
return(final) #return final tibble
}
spec_dat
test <- spec_dat %>% dplyr::filter(species_code == 10112)
test
table(is.na(test$length))
table(is.na(test$weight))
df = spec_dat
group = 10112
spec_test <- df %>% dplyr::filter(species_code == group) #filter by species code
spec_test
#define columns
weight<-spec_test$weight #set up for nls(), get weight
length<-spec_test$length #set up for nls(), get length
# test section
l_w_index <- bind_cols(weight = weight, length = length) %>% #bind matches together
dplyr::filter(!is.na(weight)) %>% #remove na values
dplyr::filter(!is.na(length)) %>%
dplyr::filter(weight > 0) %>% #remove 0 values
dplyr::filter(length > 0)
l_w_index
new_weight <- l_w_index$weight
new_length <- l_w_index$length
#run nonlinear least squares regression and print summary report
nls_LW_fit<-nls(new_weight~alpha*new_length^beta,
data=list(new_length, new_weight),
start=list(alpha=.001,beta=5),
trace=F,
control=list(maxiter = 500))
min(new_weight)
min(new_length)
max(new_weight)
max(new_length)
new_weight
alpha
new_length
#run nonlinear least squares regression and print summary report
nls_LW_fit<-nls(new_weight~alpha*new_length^beta,
